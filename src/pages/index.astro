---
// src/pages/index.astro
import Footer from "../components/Footer.astro";
import Navbar from "../components/NavBar.astro";
import Layout from "../layouts/Layout.astro";

// Datos de proyectos
const PROJECTS = [
	{
		title: "Mechanic Workshop — Shift-Application",
		urlImg: "/Turnos -Taller Mecánica.png",
		description:
			"Sistema de gestión de citas para talleres mecánicos con roles (admin/empleado/cliente), confirmaciones automáticas por email y panel administrativo. Desarrollo end-to-end y despliegue en producción.",
		link: "https://shift-application-1iwg.vercel.app",
		technologies: [
			"React",
			"Node.js",
			"PostgreSQL",
			"TypeORM",
			"TypeScript",
			"JWT",
			"Nodemailer",
			"Vercel",
			"Render",
		],
	},
	{
		title: "The Next Page — Plataforma / E-commerce (Demo)",
		urlImg: "/TheNextPage.png", // usa tu imagen o reemplaza con /nextpage-demo.png si la subís
		description:
			"Demo e-commerce orientado a flujo de compra y checkout. Mi rol principal: Desarrollador Backend — diseño de API, modelado de órdenes y integración con proveedores de pago (Mercado Pago / Stripe).",
		link: "https://the-next-page.vercel.app/home",
		technologies: [
			"Node.js",
			"Express",
			"MongoDB",
			"Mongoose",
			"Webhooks",
			"Mercado Pago",
			"Stripe",
			"Vercel",
		],
	},
	{
		title: "Foro-Hub — Proyecto Oracle ONE (Backend Java)",
		urlImg: "/ForoHubSwagger.png",
		description:
			"Foro web desarrollado como parte de Oracle ONE. Enfoque backend con Java y Spring Boot, endpoints para temas/comentarios y persistencia en MySQL; pruebas unitarias y documentación para evaluación técnica.",
		link: "https://github.com/Pablo-Andrada/Foro-Hub",
		technologies: ["Java", "Spring Boot", "MySQL", "Swagger", "JUnit"],
	},
	{
		title: "Rick & Morty App",
		urlImg: "/image.png",
		description:
			"Explorador de personajes que consume API externa con búsqueda, filtros, paginación y manejo de estado. Enfocado en experiencia frontend y rendimiento.",
		link: "https://rick-and-morty-project-zeta-one.vercel.app",
		technologies: ["React", "API Integration", "JavaScript", "CSS3", "HTML5"],
	},
	{
		title: "Movie Search App",
		urlImg: "/project2(2).jpg",
		description:
			"Buscador de películas con detalles de sinopsis y año de lanzamiento; demo desplegado y repo público.",
		link: "https://movie-search-app-ffeh.vercel.app",
		technologies: ["React", "API Integration", "CSS3", "HTML5"],
	},
];

// Datos de experiencia
const EXPERIENCE = [
	{
		period: "Dic 2024 - May 2025",
		position:
			"Desarrollador Fullstack (Backend lead) — Mechanic Workshop (Contrato temporal)",
		description:
			"Responsable del desarrollo end-to-end del sistema de gestión de turnos: API REST (Node.js + Express + TypeORM) sobre PostgreSQL, autenticación/roles con JWT, frontend React (Context API), notificaciones por email (Nodemailer), documentación (README + Postman) y despliegues automáticos (Vercel / Render). Solución en uso diario por el cliente (~50–150 reservas/mes, estimado conservador).",
	},
	{
		period: "Oct 2023 - Dic 2023",
		position: "Desarrollador Backend — The Next Page (Contrato temporal)",
		description:
			"Rol principal en backend del demo e-commerce: rutas para catálogo, carrito y órdenes; modelado en MongoDB (Mongoose); integración de pagos y webhooks; autenticación y manejo de errores; despliegue del demo en Vercel.",
	},
	{
		period: "Jul 2023 - Ago 2023",
		position: "Programador Fullstack — Henry (Proyecto individual)",
		description:
			"Proyecto individual fullstack: frontend en React + Redux y backend en Node.js + Express con Sequelize y PostgreSQL; endpoints CRUD, paginación, filtros y demo funcional.",
	},
	{
		period: "Oct 2014 - Presente",
		position: "Especialista en soporte técnico — Apex America",
		description:
			"Atención de alto volumen, documentación de procesos, gestión de tickets y coordinación con equipos internos. Habilidades transferibles a soporte post-deploy y trabajo cross-team.",
	},
];

// Nuevos proyectos adicionales
const OTHER_PROJECTS = [
	{
		title: "ConversorDeMonedas",
		link: "https://github.com/Pablo-Andrada/ConversorDeMonedas_ONE",
		technologies: ["Java", "API", "POO"],
		color: "#f89820", // Naranja JAVA
		icon: `<path d="M10.25 2.5c.918 0 1.75.82 1.75 1.857v.554c.71.153 1.371.443 1.958.854l.545-1.632a.5.5 0 0 1 .632-.316l1.498.5a.5.5 0 0 1 .316.633l-.5 1.498a6.6 6.6 0 0 1 1.434 1.055l1.415-1.124a.5.5 0 0 1 .7.078l1.06 1.325a.5.5 0 0 1-.077.7l-1.326 1.06a6.6 6.6 0 0 1 .001 2.37l1.326 1.06a.5.5 0 0 1 .077.7l-1.06 1.325a.5.5 0 0 1-.7.078l-1.415-1.124a6.6 6.6 0 0 1-1.434 1.055l.5 1.498a.5.5 0 0 1-.316.633l-1.498.5a.5.5 0 0 1-.633-.316l-.545-1.632a6.6 6.6 0 0 1-1.958.854v.554c0 1.037-.832 1.857-1.75 1.857h-2.5c-.918 0-1.75-.82-1.75-1.857v-.554a6.6 6.6 0 0 1-1.958-.854l-.545 1.632a.5.5 0 0 1-.633.316l-1.498-.5a.5.5 0 0 1-.316-.633l.5-1.498a6.6 6.6 0 0 1-1.434-1.055l-1.415 1.124a.5.5 0 0 1-.7-.078l-1.06-1.325a.5.5 0 0 1 .077-.7l1.326-1.06a6.6 6.6 0 0 1 0-2.37l-1.326-1.06a.5.5 0 0 1-.077-.7l1.06-1.325a.5.5 0 0 1 .7-.078l1.415 1.124a6.6 6.6 0 0 1 1.434-1.055l-.5-1.498a.5.5 0 0 1 .316-.633l1.498-.5a.5.5 0 0 1 .633.316l.545 1.632a6.6 6.6 0 0 1 1.958-.854v-.554c0-1.037.832-1.857 1.75-1.857h2.5zm-1.25 1.857a.25.25 0 0 0-.25-.25h-2.5a.25.25 0 0 0-.25.25v5.643c0 .138.112.25.25.25h2.5a.25.25 0 0 0 .25-.25V4.357z"/>`,
	},
	{
		title: "CinemaClub",
		link: "https://github.com/Pablo-Andrada/Cinema-Club/tree/main",
		technologies: [
			"TypeScript",
			"HTML5",
			"CSS3",
			"Express",
			"Mongoose",
			"MongoDB",
		],
		color: "#3178c6", // Azul TypeScript
		icon: `<path d="M22.2 12c0-5.5-4.5-10-10-10S2.2 6.5 2.2 12s4.5 10 10 10 10-4.5 10-10zm-16.9.9V8.2h1.5c.6 0 1.2.1 1.6.3.4.2.7.5 1 .9.2.3.3.7.3 1.1 0 .4-.1.8-.3 1.1-.2.3-.5.6-.9.8-.4.2-.9.3-1.4.3h-.8v-1.8zm1.5-3.4v3.4h.4c.3 0 .6 0 .9-.1.3-.1.5-.2.7-.4.2-.2.3-.4.3-.7 0-.3-.1-.5-.3-.7-.2-.2-.4-.3-.7-.4-.3-.1-.6-.1-.9-.1h-.4zm5.2 3.4V8.2h1.6v.9h-1v.9h.9v.9h-.9v.9h1v.9h-1.6zm3.2 0V8.2h1.6v.9h-1v.9h.9v.9h-.9v.9h1v.9h-1.6zm3.3 0V8.2h1.6v.9h-1v.9h.9v.9h-.9v.9h1v.9h-1.6zm-8.3 3.4V14h4.4v1.8h-4.4z"/>`,
	},
	{
		title: "LoanCalculatorApp",
		link: "https://github.com/Pablo-Andrada/Loan-Calculator-App",
		technologies: ["JavaScript", "React", "HTML5", "CSS3"],
		color: "#f0db4f", // Amarillo JavaScript.
		icon: `<path d="M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2zm0 2a8 8 0 100 16 8 8 0 000-16zm1.678 3.044c.369 0 .666.297.666.666v8.667a.666.666 0 01-1.332 0V7.71c0-.369.297-.666.666-.666zm-3.333 1.333c.369 0 .666.297.666.666v7.334a.666.666 0 01-1.332 0V9.043c0-.369.297-.666.666-.666zm6.667 0c.369 0 .666.297.666.666v7.334a.666.666 0 01-1.332 0V9.043c0-.369.297-.666.666-.666z"/>`,
	},
	{
		title: "SubscriptionPlatformTracker",
		link: "https://github.com/Pablo-Andrada/Subscription-Platform-Tracker",
		technologies: ["JavaScript", "React", "HTML5", "CSS3"],
		color: "#61dafb", // Azul React
		icon: `<path d="M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2zm0 2a8 8 0 100 16 8 8 0 000-16zm0 1.5c3.59 0 6.5 2.91 6.5 6.5s-2.91 6.5-6.5 6.5S5.5 15.59 5.5 12 8.41 5.5 12 5.5zm0 2c2.485 0 4.5 2.015 4.5 4.5s-2.015 4.5-4.5 4.5S7.5 14.485 7.5 12 9.515 7.5 12 7.5zm0 2a2.5 2.5 0 100 5 2.5 2.5 0 000-5z"/>`,
	},
	{
		title: "ToDoListApp-TS",
		link: "https://github.com/Pablo-Andrada/ToDoList-App-Ts/tree/main",
		technologies: ["TypeScript", "React", "HTML5", "CSS3"],
		color: "#764abc", // Púrpura Redux
		icon: `<path d="M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2zm0 2a8 8 0 100 16 8 8 0 000-16zm-1 3h2v6h-2V7zm3 0h2v6h-2V7zm-6 0h2v6H8V7z"/>`,
	},
];
---

<style is:global>
	/* (estilos exactamente iguales a los tuyos; no los repito aquí por brevedad en la explicación,
   pero en el archivo están exactamente como antes) */
	:root {
		--primary: #6366f1;
		--primary-dark: #4f46e5;
		--dark: #1e293b;
		--light: #f8fafc;
		--gray: #94a3b8;
		--transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.1);
	} /* ... resto del CSS intacto ... */
</style>

<Layout title="Pablo Andrada | FullStack Web Developer">
	<!-- Fondo de partículas -->
	<div class="particles-bg" id="particles-bg">
		<script>
			document.addEventListener("DOMContentLoaded", () => {
				const particlesBg = document.getElementById("particles-bg");
				if (!particlesBg) return;
				const particleCount = 30;
				for (let i = 0; i < particleCount; i++) {
					const particle = document.createElement("div");
					particle.classList.add("particle");
					const size = Math.random() * 10 + 5;
					const posX = Math.random() * 100;
					const posY = Math.random() * 100;
					const randomDuration = (Math.random() * 6 + 6).toFixed(2) + "s";
					particle.style.width = `${size}px`;
					particle.style.height = `${size}px`;
					particle.style.left = `${posX}%`;
					particle.style.top = `${posY}%`;
					particle.style.animation = `float ${randomDuration} infinite linear`;
					particlesBg.appendChild(particle);
				}
			});
		</script>
	</div>

	<Navbar />

	<!-- (resto del markup: hero, about, proyectos, otros proyectos) -->

	<!-- Sección Contacto -->
	<section id="contact" class="section">
		<div class="container">
			<h2 class="section-title animate-fadeIn">Contáctame</h2>

			<div
				class="max-w-2xl mx-auto bg-slate-800/50 backdrop-blur-sm rounded-xl p-8 border border-slate-700/50">
				<!--
					For Formspree: reemplaza data-endpoint con tu endpoint.
				-->
				<form
					class="contact-form"
					id="contact-form"
					method="POST"
					data-endpoint="YOUR_FORMSPREE_ENDPOINT_HERE">
					<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
						<div class="form-group animate-fadeIn delay-100">
							<input
								type="text"
								id="name"
								name="name"
								placeholder=" "
								required
							/>
							<label for="name">Nombre</label>
						</div>
						<div class="form-group animate-fadeIn delay-200">
							<input
								type="email"
								id="email"
								name="email"
								placeholder=" "
								required
							/>
							<label for="email">Email</label>
						</div>
					</div>

					<div class="form-group animate-fadeIn delay-300">
						<input
							type="text"
							id="subject"
							name="subject"
							placeholder=" "
							required
						/>
						<label for="subject">Asunto</label>
					</div>

					<div class="form-group animate-fadeIn delay-400">
						<textarea
							id="message"
							name="message"
							rows="5"
							placeholder=" "
							required></textarea>
						<label for="message">Mensaje</label>
					</div>

					<div
						id="form-status"
						class="text-center mb-4"
						role="status"
						aria-live="polite">
					</div>

					<div class="text-center animate-fadeIn delay-500">
						<button type="submit" class="btn px-10 py-3">Enviar Mensaje</button>
					</div>
				</form>
			</div>
		</div>
	</section>

	<Footer />

	<!-- Script para animaciones al hacer scroll y manejo del form -->
	<script>
		document.addEventListener("DOMContentLoaded", () => {
			// --- animaciones al hacer scroll (igual que antes) ---
			const observer = new IntersectionObserver(
				(entries) => {
					entries.forEach((entry) => {
						if (entry.isIntersecting) {
							entry.target.classList.add("animate-fadeIn");
						}
					});
				},
				{ threshold: 0.1 }
			);
			document.querySelectorAll(".animate-fadeIn").forEach((el) => {
				observer.observe(el);
			});

			// --- scroll suave para enlaces internos (igual que antes) ---
			document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
				anchor.addEventListener("click", (e) => {
					e.preventDefault();
					const element = e.currentTarget;
					if (!element || !(element instanceof HTMLElement)) return;
					const targetId = element.getAttribute("href");
					if (!targetId) return;
					const targetElement = document.querySelector(targetId);
					if (targetElement instanceof HTMLElement) {
						window.scrollTo({
							top: targetElement.offsetTop - 80,
							behavior: "smooth",
						});
					}
				});
			});

			/* -----------------------------
				FORMSPREE: manejo de envío (con comprobaciones de tipo)
			------------------------------*/
			(function setupContactForm() {
				const formEl = document.getElementById("contact-form");
				// Asegurar que realmente sea un HTMLFormElement antes de usar .reset() / .dataset
				if (!(formEl instanceof HTMLFormElement)) return;
				const form = formEl; // ahora TypeScript sabe que es HTMLFormElement

				const statusEl = document.getElementById("form-status");
				const submitBtn = form.querySelector('button[type="submit"]');

				// Recuperar endpoint desde dataset del form
				const endpoint =
					form.dataset && form.dataset.endpoint ? form.dataset.endpoint : "";

				form.addEventListener("submit", async (e) => {
					e.preventDefault();

					// Si no pusiste endpoint real, avisar
					if (
						!endpoint ||
						endpoint.includes("https://formspree.io/f/xldprnjj")
					) {
						if (statusEl instanceof HTMLElement) {
							statusEl.textContent =
								"Por favor, reemplaza data-endpoint en el formulario con tu endpoint de Formspree.";
							statusEl.className = "text-yellow-400 mt-4";
						}
						return;
					}

					// Lectura segura de inputs
					const nameEl = form.querySelector("#name");
					const emailEl = form.querySelector("#email");
					const subjectEl = form.querySelector("#subject");
					const messageEl = form.querySelector("#message");

					const name =
						nameEl instanceof HTMLInputElement ? nameEl.value.trim() : "";
					const email =
						emailEl instanceof HTMLInputElement ? emailEl.value.trim() : "";
					const subject =
						subjectEl instanceof HTMLInputElement ? subjectEl.value.trim() : "";
					const message =
						messageEl instanceof HTMLTextAreaElement
							? messageEl.value.trim()
							: "";

					if (!name || !email || !message) {
						if (statusEl instanceof HTMLElement) {
							statusEl.textContent =
								"Completa los campos requeridos antes de enviar.";
							statusEl.className = "text-yellow-400 mt-4";
						}
						return;
					}

					const payload = { name, email, subject, message };

					// Deshabilitar botón (solo si es HTMLButtonElement)
					if (submitBtn instanceof HTMLButtonElement) {
						submitBtn.disabled = true;
						submitBtn.textContent = "Enviando...";
					}
					if (statusEl instanceof HTMLElement) statusEl.textContent = "";

					try {
						const res = await fetch(endpoint, {
							method: "POST",
							headers: {
								"Content-Type": "application/json",
								Accept: "application/json",
							},
							body: JSON.stringify(payload),
						});

						if (res.ok) {
							if (statusEl instanceof HTMLElement) {
								statusEl.textContent =
									"¡Mensaje enviado! Gracias, te responderé pronto.";
								statusEl.className = "text-green-400 mt-4";
							}
							// form es HTMLFormElement, reset() existe
							form.reset();
						} else {
							let errMsg = "Error al enviar el formulario. Intenta nuevamente.";
							try {
								const data = await res.json();
								if (data && data.error) errMsg = data.error;
							} catch (err) {
								/* ignore JSON parse error */
							}
							if (statusEl instanceof HTMLElement) {
								statusEl.textContent = errMsg;
								statusEl.className = "text-red-400 mt-4";
							}
						}
					} catch (error) {
						if (statusEl instanceof HTMLElement) {
							statusEl.textContent =
								"Error de red al enviar. Revisa tu conexión e inténtalo de nuevo.";
							statusEl.className = "text-red-400 mt-4";
						}
					} finally {
						if (submitBtn instanceof HTMLButtonElement) {
							submitBtn.disabled = false;
							submitBtn.textContent = "Enviar Mensaje";
						}
					}
				});
			})();
		});
	</script>
</Layout>
